import hashlib

import tlv8
from Crypto.PublicKey import RSA


keyPair = RSA.generate(bits=2048)
pubKey = keyPair.publickey()


def hash_sha512(data):
    return hashlib.sha512(data).digest()


def sign(my_hash):
    return pow(int.from_bytes(my_hash, byteorder='big'), keyPair.d, keyPair.n)


def verify(my_hash, signature):
    print(hex(pow(signature, pubKey.e, pubKey.n)))
    print(hex(int.from_bytes(my_hash, byteorder='big')))
    return pow(signature, pubKey.e, pubKey.n) == int.from_bytes(my_hash, byteorder='big')


structure = {
        1: tlv8.DataType.BYTES, # hash
        2: tlv8.DataType.BYTES, # signature
        3: tlv8.DataType.BYTES, # extractor
        4: tlv8.DataType.BYTES, # data_hash
        5: tlv8.DataType.BYTES, # data_signature
        6: tlv8.DataType.BYTES, # data
    }


def pack(extractor, data):
    result = []
    extractor_hash = hash_sha512(extractor.encode())

    extractor_signature = sign(extractor_hash).to_bytes(length=2048, byteorder='big')
    result.append(tlv8.Entry(1, extractor_hash))
    result.append(tlv8.Entry(2, extractor_signature))
    result.append(tlv8.Entry(3, extractor))
    return tlv8.encode(result)


def unpack(data):
    decoded = tlv8.decode(data, structure)
    extractor_hash = decoded[0].data
    extractor_signature = decoded[1].data
    if not verify(extractor_hash, int.from_bytes(extractor_signature, "big")):
        raise Exception("Signature is not valid")
    extractor = decoded[2].data



extractor = """
!#/bin/bash
echo "Installing..."
echo "Installing..."
echo "Installing..."
blabla
"""

data = open("testdata.zip", "rb").read()

open("test.bin", "wb")

a = "test123"
my_hash = hash_sha512(a.encode())
signature = sign(my_hash)

print(verify(my_hash, signature))
packed = pack(extractor, data)
unpacked = unpack(packed)
print(unpacked)