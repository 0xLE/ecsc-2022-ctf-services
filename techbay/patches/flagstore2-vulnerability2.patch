diff --git a/backend-node/src/repositories/trading.repository.ts b/backend-node/src/repositories/trading.repository.ts
index 309bda6..e7149ac 100644
--- a/backend-node/src/repositories/trading.repository.ts
+++ b/backend-node/src/repositories/trading.repository.ts
@@ -1,9 +1,16 @@
-import {NewOffer, Offer, PageConfig} from "../types/trading.type";
+import {NewOffer, Offer, Order, PageConfig} from "../types/trading.type";
 import {getDbConnection} from "../db";
 
 export async function getAllPaginated(pageConfig: PageConfig, userId: number): Promise<Offer[]> {
     const conn = await getDbConnection();
 
+    const limit = pageConfig.limit ?? 10;
+    const offset = (pageConfig.page ?? 0) * limit;
+    const nameOrder = pageConfig.nameOrder?.toString() == 'ASC' ? Order.ASC : Order.DESC;
+    const creationOrder = pageConfig.creationOrder?.toString() == 'ASC' ? Order.ASC : Order.DESC;
+
+    const paginationClause = `ORDER BY o.name ${nameOrder}, o.timestamp ${creationOrder} LIMIT $2::integer OFFSET $3::integer;`
+
     const res = await conn.query(
         "SELECT o.id as offerId, o.name as offerName, o.description as offerDescription, o.picture as offerPicture, o.timestamp as offerTimestamp, " +
         "c.id as creatorId, c.username as creatorUsername, c.displayname as creatorDisplayname, " +
@@ -11,7 +18,7 @@ export async function getAllPaginated(pageConfig: PageConfig, userId: number): P
         "(SELECT exists(SELECT * FROM requests r WHERE r.offer_id = o.id AND r.user_id = $1::integer)) as isRequestedByMe " +
         "FROM offers o " +
         "JOIN profiles c ON o.creator_id = c.id " +
-        "LEFT JOIN profiles ow ON o.owner_id = ow.id "+safePagination(pageConfig), [userId]
+        "LEFT JOIN profiles ow ON o.owner_id = ow.id " + paginationClause, [userId, limit, offset]
     );
     const rows = res.rows;
 
@@ -41,6 +48,13 @@ export async function getOfferInfo(offerId: number, userId: number): Promise<Off
 export async function getOffersByUserId(userId: number, pageConfig: PageConfig): Promise<Offer[]> {
     const conn = await getDbConnection();
 
+    const limit = pageConfig.limit ?? 10;
+    const offset = (pageConfig.page ?? 0) * limit;
+    const nameOrder = pageConfig.nameOrder?.toString() == 'ASC' ? Order.ASC : Order.DESC;
+    const creationOrder = pageConfig.creationOrder?.toString() == 'ASC' ? Order.ASC : Order.DESC;
+
+    const paginationClause = `ORDER BY o.name ${nameOrder}, o.timestamp ${creationOrder} LIMIT $3::integer OFFSET $4::integer;`
+
     const res = await conn.query(
         "SELECT o.id as offerId, o.name as offerName, o.description as offerDescription, o.picture as offerPicture, o.timestamp as offerTimestamp, " +
         "c.id as creatorId, c.username as creatorUsername, c.displayname as creatorDisplayname, " +
@@ -49,7 +63,7 @@ export async function getOffersByUserId(userId: number, pageConfig: PageConfig):
         "FROM offers o " +
         "JOIN profiles c ON o.creator_id = c.id " +
         "LEFT JOIN profiles ow ON o.owner_id = ow.id " +
-        "WHERE c.id = $1::integer "+safePagination(pageConfig), [userId, userId]
+        "WHERE c.id = $1::integer " + paginationClause, [userId, userId, limit, offset]
     );
     const rows = res.rows;
 
@@ -93,8 +107,3 @@ function databaseOfferDataToOffer(databaseOfferData: any): Offer {
 
     return offer as Offer;
 }
-
-function safePagination(pageConfig: PageConfig) {
-    const offset = (pageConfig.page ?? 0) * (pageConfig.limit ?? 10);
-    return `ORDER BY name ${pageConfig.nameOrder}, timestamp ${pageConfig.creationOrder} LIMIT ${pageConfig.limit} OFFSET ${offset}`;
-}
\ No newline at end of file
